//! These are the HCI errors that can be generated by the controller as listed in Vol 2 Part D of
//! the Bluetooth v5.0 Specification

use core::convert::From;
use core::fmt::{Debug, Formatter, Result};

#[derive(Clone, Copy, PartialEq, PartialOrd)]
pub enum Error {
    /// NoError is not part of the official error list in the Bluetooth Spec (v5 | Vol 2, Part D
    /// Sect 2). Its just a placeholder for when there is no error generated
    NoError,
    UnknownHCICommand,
    UnknownConnectionIdentifier,
    HardwareFailure,
    PageTimeout,
    AuthenticationFailure,
    PINorKeyMissing,
    MemoryCapacityExceeded,
    ConnectionTimeout,
    ConnectionLimitExceeded,
    SynchronousConnectionLimitToADeviceExceeded,
    ConnectionAlreadyExists,
    CommandDisallowed,
    ConnectionRejectedDueToLimitedResources,
    ConnectionRejectedDueToSecurityReasons,
    ConnectionRejectedDueToUnacceptableBluetoothAddress,
    ConnectionAcceptTimeoutExceeded,
    UnsupportedFeatureOrParameterValue,
    InvalidHCICommandParameters,
    RemoteUserTerminatedConnection,
    RemoteDeviceTerminatedConnectionDueToLowResources,
    RemoteDeviceTerminatedConnectionDueToPowerOff,
    ConnectionTerminatedByLocalHost,
    RepeatedAttempts,
    PairingNotAllowed,
    UnknownLMPPDU,
    UnsupportedRemoteFeatureOrUnsupportedLMPFeature,
    SCOOffsetRejected,
    SCOIntervalRejected,
    SCOAirModeRejected,
    InvalidLMPParametersOrInvalidLLParameters,
    UnspecifiedError,
    UnspportedLMPParameterValueOrUnsupportedLLParameterVAlue,
    RoleChangeNotAllowed,
    LMPResponseTimeoutOrLLResponseTimeout,
    LPMErrorTransationCollisionOrLLProcedureColision,
    LMPPDUNotAllowed,
    EncryptionModeNotAcceptable,
    LinkKeyCannotBeChanged,
    RequestedQosNosSupported,
    InstantPassed,
    PairingWithUnitKeyNotSupported,
    DifferentTransactionCollision,
    QosUnacceptableParameter,
    QosRejected,
    ChannelAssessmetNotSupported,
    InsufficientSecurity,
    ParameterOutOfMandatorRange,
    RoleSwitchPending,
    ReservedSlotViolation,
    RoleSwithFailed,
    ExtendedInquiryResponseTooLarge,
    SimplePairingNotSupportedByHost,
    HostBusyBecausePairing,
    ConnectionRejectedDueToNoSuitableChannelFound,
    ControllerBusy,
    UnacceptableConnectionParameters,
    AdvertisingTimeout,
    ConnectionTerminatedDueToMICFailure,
    ConnectionFailedToBeEstablished,
    MACConnectionFailed,
    CoarseClockAdjustmentRejectedButWillTryToAdjustUsingClockDragging,
    Type0SubmapNotDefined,
    UnknownAdvertisingIdentifier,
    LimitReached,
    OperationCancelledByHose,
}

impl Debug for Error {
    fn fmt(&self, f: &mut Formatter) -> Result {
        use self::Error::*;

        match *self {
            NoError => write!(f, "NoError"),
            UnknownHCICommand => write!(f, "UnknownHCICommand (0x{:X})", 0x01),
            UnknownConnectionIdentifier => write!(f, "UnknownConnectionIdentifier (0x{:X})", 0x02),
            HardwareFailure => write!(f, "HardwareFailure (0x{:X})", 0x03),
            PageTimeout => write!(f, "PageTimeout (0x{:X})", 0x04),
            AuthenticationFailure => write!(f, "AuthenticationFailure (0x{:X})", 0x05),
            PINorKeyMissing => write!(f, "PINorKeyMissing (0x{:X})", 0x06),
            MemoryCapacityExceeded => write!(f, "MemoryCapacityExceeded (0x{:X})", 0x07),
            ConnectionTimeout => write!(f, "ConnectionTimeout (0x{:X})", 0x08),
            ConnectionLimitExceeded => write!(f, "ConnectionLimitExceeded (0x{:X})", 0x09),
            SynchronousConnectionLimitToADeviceExceeded => write!(
                f,
                "SynchronousConnectionLimitToADeviceExceeded (0x{:X})",
                0x0a
            ),
            ConnectionAlreadyExists => write!(f, "ConnectionAlreadyExists (0x{:X})", 0x0b),
            CommandDisallowed => write!(f, "CommandDisallowed (0x{:X})", 0x0c),
            ConnectionRejectedDueToLimitedResources => {
                write!(f, "ConnectionRejectedDueToLimitedResources (0x{:X})", 0x0d)
            }
            ConnectionRejectedDueToSecurityReasons => {
                write!(f, "ConnectionRejectedDueToSecurityReasons (0x{:X})", 0x0e)
            }
            ConnectionRejectedDueToUnacceptableBluetoothAddress => write!(
                f,
                "ConnectionRejectedDueToUnacceptableBluetoothAddress (0x{:X})",
                0x0f
            ),
            ConnectionAcceptTimeoutExceeded => {
                write!(f, "ConnectionAcceptTimeoutExceeded (0x{:X})", 0x10)
            }
            UnsupportedFeatureOrParameterValue => {
                write!(f, "UnsupportedFeatureOrParameterValue (0x{:X})", 0x11)
            }
            InvalidHCICommandParameters => write!(f, "InvalidHCICommandParameters (0x{:X})", 0x12),
            RemoteUserTerminatedConnection => {
                write!(f, "RemoteUserTerminatedConnection (0x{:X})", 0x13)
            }
            RemoteDeviceTerminatedConnectionDueToLowResources => write!(
                f,
                "RemoteDeviceTerminatedConnectionDueToLowResources (0x{:X})",
                0x14
            ),
            RemoteDeviceTerminatedConnectionDueToPowerOff => write!(
                f,
                "RemoteDeviceTerminatedConnectionDueToPowerOff (0x{:X})",
                0x15
            ),
            ConnectionTerminatedByLocalHost => {
                write!(f, "ConnectionTerminatedByLocalHost (0x{:X})", 0x16)
            }
            RepeatedAttempts => write!(f, "RepeatedAttempts (0x{:X})", 0x17),
            PairingNotAllowed => write!(f, "PairingNotAllowed (0x{:X})", 0x18),
            UnknownLMPPDU => write!(f, "UnknownLMPPDU (0x{:X})", 0x19),
            UnsupportedRemoteFeatureOrUnsupportedLMPFeature => write!(
                f,
                "UnsupportedRemoteFeatureOrUnsupportedLMPFeature (0x{:X})",
                0x1a
            ),
            SCOOffsetRejected => write!(f, "SCOOffsetRejected (0x{:X})", 0x1b),
            SCOIntervalRejected => write!(f, "SCOIntervalRejected (0x{:X})", 0x1c),
            SCOAirModeRejected => write!(f, "SCOAirModeRejected (0x{:X})", 0x1d),
            InvalidLMPParametersOrInvalidLLParameters => write!(
                f,
                "InvalidLMPParametersOrInvalidLLParameters (0x{:X})",
                0x1e
            ),
            UnspecifiedError => write!(f, "UnspecifiedError (0x{:X})", 0x1f),
            UnspportedLMPParameterValueOrUnsupportedLLParameterVAlue => write!(
                f,
                "UnspportedLMPParameterValueOrUnsupportedLLParameterVAlue (0x{:X})",
                0x20
            ),
            RoleChangeNotAllowed => write!(f, "RoleChangeNotAllowed (0x{:X})", 0x21),
            LMPResponseTimeoutOrLLResponseTimeout => {
                write!(f, "LMPResponseTimeoutOrLLResponseTimeout (0x{:X})", 0x22)
            }
            LPMErrorTransationCollisionOrLLProcedureColision => write!(
                f,
                "LPMErrorTransationCollisionOrLLProcedureColision (0x{:X})",
                0x23
            ),
            LMPPDUNotAllowed => write!(f, "LMPPDUNotAllowed (0x{:X})", 0x24),
            EncryptionModeNotAcceptable => write!(f, "EncryptionModeNotAcceptable (0x{:X})", 0x25),
            LinkKeyCannotBeChanged => write!(f, "LinkKeyCannotBeChanged (0x{:X})", 0x26),
            RequestedQosNosSupported => write!(f, "RequestedQosNosSupported (0x{:X})", 0x27),
            InstantPassed => write!(f, "InstantPassed (0x{:X})", 0x28),
            PairingWithUnitKeyNotSupported => {
                write!(f, "PairingWithUnitKeyNotSupported (0x{:X})", 0x29)
            }
            DifferentTransactionCollision => {
                write!(f, "DifferentTransactionCollision (0x{:X})", 0x2a)
            }
            QosUnacceptableParameter => write!(f, "QosUnacceptableParameter (0x{:X})", 0x2c),
            QosRejected => write!(f, "QosRejected (0x{:X})", 0x2d),
            ChannelAssessmetNotSupported => {
                write!(f, "ChannelAssessmetNotSupported (0x{:X})", 0x2e)
            }
            InsufficientSecurity => write!(f, "InsufficientSecurity (0x{:X})", 0x2f),
            ParameterOutOfMandatorRange => write!(f, "ParameterOutOfMandatorRange (0x{:X})", 0x30),
            RoleSwitchPending => write!(f, "RoleSwitchPending (0x{:X})", 0x32),
            ReservedSlotViolation => write!(f, "ReservedSlotViolation (0x{:X})", 0x34),
            RoleSwithFailed => write!(f, "RoleSwithFailed (0x{:X})", 0x35),
            ExtendedInquiryResponseTooLarge => {
                write!(f, "ExtendedInquiryResponseTooLarge (0x{:X})", 0x36)
            }
            SimplePairingNotSupportedByHost => {
                write!(f, "SimplePairingNotSupportedByHost (0x{:X})", 0x37)
            }
            HostBusyBecausePairing => write!(f, "HostBusyBecausePairing (0x{:X})", 0x38),
            ConnectionRejectedDueToNoSuitableChannelFound => write!(
                f,
                "ConnectionRejectedDueToNoSuitableChannelFound (0x{:X})",
                0x39
            ),
            ControllerBusy => write!(f, "ControllerBusy (0x{:X})", 0x3a),
            UnacceptableConnectionParameters => {
                write!(f, "UnacceptableConnectionParameters (0x{:X})", 0x3b)
            }
            AdvertisingTimeout => write!(f, "AdvertisingTimeout (0x{:X})", 0x3c),
            ConnectionTerminatedDueToMICFailure => {
                write!(f, "ConnectionTerminatedDueToMICFailure (0x{:X})", 0x3d)
            }
            ConnectionFailedToBeEstablished => {
                write!(f, "ConnectionFailedToBeEstablished (0x{:X})", 0x3e)
            }
            MACConnectionFailed => write!(f, "MACConnectionFailed (0x{:X})", 0x3f),
            CoarseClockAdjustmentRejectedButWillTryToAdjustUsingClockDragging => write!(
                f,
                "CoarseClockAdjustmentRejectedButWillTryToAdjustUsingClockDragging (0x{:X})",
                0x40
            ),
            Type0SubmapNotDefined => write!(f, "Type0SubmapNotDefined (0x{:X})", 0x41),
            UnknownAdvertisingIdentifier => {
                write!(f, "UnknownAdvertisingIdentifier (0x{:X})", 0x42)
            }
            LimitReached => write!(f, "LimitReached (0x{:X})", 0x43),
            OperationCancelledByHose => write!(f, "OperationCancelledByHose (0x{:X})", 0x44),
        }
    }
}

impl From<u8> for Error {
    fn from(raw: u8) -> Self {
        use hci::error::Error::*;

        match raw {
            0x00 => NoError,
            0x01 => UnknownHCICommand,
            0x02 => UnknownConnectionIdentifier,
            0x03 => HardwareFailure,
            0x04 => PageTimeout,
            0x05 => AuthenticationFailure,
            0x06 => PINorKeyMissing,
            0x07 => MemoryCapacityExceeded,
            0x08 => ConnectionTimeout,
            0x09 => ConnectionLimitExceeded,
            0x0a => SynchronousConnectionLimitToADeviceExceeded,
            0x0b => ConnectionAlreadyExists,
            0x0c => CommandDisallowed,
            0x0d => ConnectionRejectedDueToLimitedResources,
            0x0e => ConnectionRejectedDueToSecurityReasons,
            0x0f => ConnectionRejectedDueToUnacceptableBluetoothAddress,
            0x10 => ConnectionAcceptTimeoutExceeded,
            0x11 => UnsupportedFeatureOrParameterValue,
            0x12 => InvalidHCICommandParameters,
            0x13 => RemoteUserTerminatedConnection,
            0x14 => RemoteDeviceTerminatedConnectionDueToLowResources,
            0x15 => RemoteDeviceTerminatedConnectionDueToPowerOff,
            0x16 => ConnectionTerminatedByLocalHost,
            0x17 => RepeatedAttempts,
            0x18 => PairingNotAllowed,
            0x19 => UnknownLMPPDU,
            0x1a => UnsupportedRemoteFeatureOrUnsupportedLMPFeature,
            0x1b => SCOOffsetRejected,
            0x1c => SCOIntervalRejected,
            0x1d => SCOAirModeRejected,
            0x1e => InvalidLMPParametersOrInvalidLLParameters,
            0x1f => UnspecifiedError,
            0x20 => UnspportedLMPParameterValueOrUnsupportedLLParameterVAlue,
            0x21 => RoleChangeNotAllowed,
            0x22 => LMPResponseTimeoutOrLLResponseTimeout,
            0x23 => LPMErrorTransationCollisionOrLLProcedureColision,
            0x24 => LMPPDUNotAllowed,
            0x25 => EncryptionModeNotAcceptable,
            0x26 => LinkKeyCannotBeChanged,
            0x27 => RequestedQosNosSupported,
            0x28 => InstantPassed,
            0x29 => PairingWithUnitKeyNotSupported,
            0x2a => DifferentTransactionCollision,
            0x2c => QosUnacceptableParameter,
            0x2d => QosRejected,
            0x2e => ChannelAssessmetNotSupported,
            0x2f => InsufficientSecurity,
            0x30 => ParameterOutOfMandatorRange,
            0x32 => RoleSwitchPending,
            0x34 => ReservedSlotViolation,
            0x35 => RoleSwithFailed,
            0x36 => ExtendedInquiryResponseTooLarge,
            0x37 => SimplePairingNotSupportedByHost,
            0x38 => HostBusyBecausePairing,
            0x39 => ConnectionRejectedDueToNoSuitableChannelFound,
            0x3a => ControllerBusy,
            0x3b => UnacceptableConnectionParameters,
            0x3c => AdvertisingTimeout,
            0x3d => ConnectionTerminatedDueToMICFailure,
            0x3e => ConnectionFailedToBeEstablished,
            0x3f => MACConnectionFailed,
            0x40 => CoarseClockAdjustmentRejectedButWillTryToAdjustUsingClockDragging,
            0x41 => Type0SubmapNotDefined,
            0x42 => UnknownAdvertisingIdentifier,
            0x43 => LimitReached,
            0x44 => OperationCancelledByHose,
            _ => panic!(r#"Cannot convert "{}" into HCI Error"#, raw),
        }
    }
}
