/* automatically generated by rust-bindgen 0.69.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const BTPROTO_HCI: u32 = 1;
pub const HCI_VIRTUAL: u32 = 0;
pub const HCI_USB: u32 = 1;
pub const HCI_PCCARD: u32 = 2;
pub const HCI_UART: u32 = 3;
pub const HCI_RS232: u32 = 4;
pub const HCI_PCI: u32 = 5;
pub const HCI_SDIO: u32 = 6;
pub const HCI_SPI: u32 = 7;
pub const HCI_I2C: u32 = 8;
pub const HCI_SMD: u32 = 9;
pub const HCI_VIRTIO: u32 = 10;
pub const HCI_COMMAND_PKT: u32 = 1;
pub const HCI_ACLDATA_PKT: u32 = 2;
pub const HCI_SCODATA_PKT: u32 = 3;
pub const HCI_EVENT_PKT: u32 = 4;
pub const HCI_ISODATA_PKT: u32 = 5;
pub const HCI_VENDOR_PKT: u32 = 255;
pub const HCI_DEV_NONE: u32 = 65535;
pub const HCI_CHANNEL_RAW: u32 = 0;
pub const HCI_CHANNEL_USER: u32 = 1;
pub const HCI_CHANNEL_CONTROL: u32 = 3;
pub const MGMT_INDEX_NONE: u32 = 65535;
pub const MGMT_STATUS_SUCCESS: u32 = 0;
pub const MGMT_STATUS_UNKNOWN_COMMAND: u32 = 1;
pub const MGMT_STATUS_NOT_CONNECTED: u32 = 2;
pub const MGMT_STATUS_FAILED: u32 = 3;
pub const MGMT_STATUS_CONNECT_FAILED: u32 = 4;
pub const MGMT_STATUS_AUTH_FAILED: u32 = 5;
pub const MGMT_STATUS_NOT_PAIRED: u32 = 6;
pub const MGMT_STATUS_NO_RESOURCES: u32 = 7;
pub const MGMT_STATUS_TIMEOUT: u32 = 8;
pub const MGMT_STATUS_ALREADY_CONNECTED: u32 = 9;
pub const MGMT_STATUS_BUSY: u32 = 10;
pub const MGMT_STATUS_REJECTED: u32 = 11;
pub const MGMT_STATUS_NOT_SUPPORTED: u32 = 12;
pub const MGMT_STATUS_INVALID_PARAMS: u32 = 13;
pub const MGMT_STATUS_DISCONNECTED: u32 = 14;
pub const MGMT_STATUS_NOT_POWERED: u32 = 15;
pub const MGMT_STATUS_CANCELLED: u32 = 16;
pub const MGMT_STATUS_INVALID_INDEX: u32 = 17;
pub const MGMT_STATUS_RFKILLED: u32 = 18;
pub const MGMT_STATUS_ALREADY_PAIRED: u32 = 19;
pub const MGMT_STATUS_PERMISSION_DENIED: u32 = 20;
pub const MGMT_OP_READ_VERSION: u32 = 1;
pub const MGMT_OP_READ_COMMANDS: u32 = 2;
pub const MGMT_OP_READ_INDEX_LIST: u32 = 3;
pub const MGMT_OP_READ_INFO: u32 = 4;
pub const MGMT_OP_SET_POWERED: u32 = 5;
pub const MGMT_OP_SET_DISCOVERABLE: u32 = 6;
pub const MGMT_OP_SET_CONNECTABLE: u32 = 7;
pub const MGMT_OP_SET_FAST_CONNECTABLE: u32 = 8;
pub const MGMT_OP_SET_BONDABLE: u32 = 9;
pub const MGMT_OP_SET_LINK_SECURITY: u32 = 10;
pub const MGMT_OP_SET_SSP: u32 = 11;
pub const MGMT_OP_SET_HS: u32 = 12;
pub const MGMT_OP_SET_LE: u32 = 13;
pub const MGMT_OP_SET_DEV_CLASS: u32 = 14;
pub const MGMT_OP_SET_LOCAL_NAME: u32 = 15;
pub const MGMT_OP_ADD_UUID: u32 = 16;
pub const MGMT_OP_REMOVE_UUID: u32 = 17;
pub const MGMT_OP_LOAD_LINK_KEYS: u32 = 18;
pub const MGMT_OP_LOAD_LONG_TERM_KEYS: u32 = 19;
pub const MGMT_OP_DISCONNECT: u32 = 20;
pub const MGMT_OP_GET_CONNECTIONS: u32 = 21;
pub const MGMT_OP_PIN_CODE_REPLY: u32 = 22;
pub const MGMT_OP_PIN_CODE_NEG_REPLY: u32 = 23;
pub const MGMT_OP_SET_IO_CAPABILITY: u32 = 24;
pub const MGMT_OP_PAIR_DEVICE: u32 = 25;
pub const MGMT_OP_CANCEL_PAIR_DEVICE: u32 = 26;
pub const MGMT_OP_UNPAIR_DEVICE: u32 = 27;
pub const MGMT_OP_USER_CONFIRM_REPLY: u32 = 28;
pub const MGMT_OP_USER_CONFIRM_NEG_REPLY: u32 = 29;
pub const MGMT_OP_USER_PASSKEY_REPLY: u32 = 30;
pub const MGMT_OP_USER_PASSKEY_NEG_REPLY: u32 = 31;
pub const MGMT_OP_READ_LOCAL_OOB_DATA: u32 = 32;
pub const MGMT_OP_ADD_REMOTE_OOB_DATA: u32 = 33;
pub const MGMT_OP_REMOVE_REMOTE_OOB_DATA: u32 = 34;
pub const MGMT_OP_START_DISCOVERY: u32 = 35;
pub const MGMT_OP_STOP_DISCOVERY: u32 = 36;
pub const MGMT_OP_CONFIRM_NAME: u32 = 37;
pub const MGMT_OP_BLOCK_DEVICE: u32 = 38;
pub const MGMT_OP_UNBLOCK_DEVICE: u32 = 39;
pub const MGMT_OP_SET_DEVICE_ID: u32 = 40;
pub const MGMT_OP_SET_ADVERTISING: u32 = 41;
pub const MGMT_OP_SET_BREDR: u32 = 42;
pub const MGMT_OP_SET_STATIC_ADDRESS: u32 = 43;
pub const MGMT_OP_SET_SCAN_PARAMS: u32 = 44;
pub const MGMT_OP_SET_SECURE_CONN: u32 = 45;
pub const MGMT_OP_SET_DEBUG_KEYS: u32 = 46;
pub const MGMT_OP_SET_PRIVACY: u32 = 47;
pub const MGMT_OP_LOAD_IRKS: u32 = 48;
pub const MGMT_OP_GET_CONN_INFO: u32 = 49;
pub const MGMT_OP_GET_CLOCK_INFO: u32 = 50;
pub const MGMT_OP_ADD_DEVICE: u32 = 51;
pub const MGMT_OP_REMOVE_DEVICE: u32 = 52;
pub const MGMT_OP_LOAD_CONN_PARAM: u32 = 53;
pub const MGMT_OP_READ_UNCONF_INDEX_LIST: u32 = 54;
pub const MGMT_OP_READ_CONFIG_INFO: u32 = 55;
pub const MGMT_OP_SET_EXTERNAL_CONFIG: u32 = 56;
pub const MGMT_OP_SET_PUBLIC_ADDRESS: u32 = 57;
pub const MGMT_OP_START_SERVICE_DISCOVERY: u32 = 58;
pub const MGMT_OP_READ_LOCAL_OOB_EXT_DATA: u32 = 59;
pub const MGMT_OP_READ_EXT_INDEX_LIST: u32 = 60;
pub const MGMT_OP_READ_ADV_FEATURES: u32 = 61;
pub const MGMT_OP_ADD_ADVERTISING: u32 = 62;
pub const MGMT_OP_REMOVE_ADVERTISING: u32 = 63;
pub const MGMT_OP_GET_ADV_SIZE_INFO: u32 = 64;
pub const MGMT_OP_START_LIMITED_DISCOVERY: u32 = 65;
pub const MGMT_OP_READ_EXT_INFO: u32 = 66;
pub const MGMT_OP_SET_APPEARANCE: u32 = 67;
pub const MGMT_OP_GET_PHY_CONFIGURATION: u32 = 68;
pub const MGMT_OP_SET_PHY_CONFIGURATION: u32 = 69;
pub const MGMT_OP_SET_BLOCKED_KEYS: u32 = 70;
pub const MGMT_OP_SET_WIDEBAND_SPEECH: u32 = 71;
pub const MGMT_OP_READ_CONTROLLER_CAP: u32 = 72;
pub const MGMT_OP_READ_EXP_FEATURES_INFO: u32 = 73;
pub const MGMT_OP_SET_EXP_FEATURE: u32 = 74;
pub const MGMT_OP_READ_DEF_SYSTEM_CONFIG: u32 = 75;
pub const MGMT_OP_SET_DEF_SYSTEM_CONFIG: u32 = 76;
pub const MGMT_OP_READ_DEF_RUNTIME_CONFIG: u32 = 77;
pub const MGMT_OP_SET_DEF_RUNTIME_CONFIG: u32 = 78;
pub const MGMT_OP_GET_DEVICE_FLAGS: u32 = 79;
pub const MGMT_OP_SET_DEVICE_FLAGS: u32 = 80;
pub const MGMT_OP_READ_ADV_MONITOR_FEATURES: u32 = 81;
pub const MGMT_OP_ADD_ADV_PATTERNS_MONITOR: u32 = 82;
pub const MGMT_OP_REMOVE_ADV_MONITOR: u32 = 83;
pub const MGMT_OP_ADD_EXT_ADV_PARAMS: u32 = 84;
pub const MGMT_OP_ADD_EXT_ADV_DATA: u32 = 85;
pub const MGMT_OP_ADD_ADV_PATTERNS_MONITOR_RSSI: u32 = 86;
pub const MGMT_OP_SET_MESH_RECEIVER: u32 = 87;
pub const MGMT_OP_MESH_READ_FEATURES: u32 = 88;
pub const MGMT_OP_MESH_SEND: u32 = 89;
pub const MGMT_OP_MESH_SEND_CANCEL: u32 = 90;
pub const MGMT_EV_CMD_COMPLETE: u32 = 1;
pub const MGMT_EV_CMD_STATUS: u32 = 2;
pub const MGMT_EV_CONTROLLER_ERROR: u32 = 3;
pub const MGMT_EV_INDEX_ADDED: u32 = 4;
pub const MGMT_EV_INDEX_REMOVED: u32 = 5;
pub const MGMT_EV_NEW_SETTINGS: u32 = 6;
pub const MGMT_EV_CLASS_OF_DEV_CHANGED: u32 = 7;
pub const MGMT_EV_LOCAL_NAME_CHANGED: u32 = 8;
pub const MGMT_EV_NEW_LINK_KEY: u32 = 9;
pub const MGMT_EV_NEW_LONG_TERM_KEY: u32 = 10;
pub const MGMT_EV_DEVICE_CONNECTED: u32 = 11;
pub const MGMT_EV_DEVICE_DISCONNECTED: u32 = 12;
pub const MGMT_EV_CONNECT_FAILED: u32 = 13;
pub const MGMT_EV_PIN_CODE_REQUEST: u32 = 14;
pub const MGMT_EV_USER_CONFIRM_REQUEST: u32 = 15;
pub const MGMT_EV_USER_PASSKEY_REQUEST: u32 = 16;
pub const MGMT_EV_AUTH_FAILED: u32 = 17;
pub const MGMT_EV_DEVICE_FOUND: u32 = 18;
pub const MGMT_EV_DISCOVERING: u32 = 19;
pub const MGMT_EV_DEVICE_BLOCKED: u32 = 20;
pub const MGMT_EV_DEVICE_UNBLOCKED: u32 = 21;
pub const MGMT_EV_DEVICE_UNPAIRED: u32 = 22;
pub const MGMT_EV_PASSKEY_NOTIFY: u32 = 23;
pub const MGMT_EV_NEW_IRK: u32 = 24;
pub const MGMT_EV_NEW_CSRK: u32 = 25;
pub const MGMT_EV_DEVICE_ADDED: u32 = 26;
pub const MGMT_EV_DEVICE_REMOVED: u32 = 27;
pub const MGMT_EV_NEW_CONN_PARAM: u32 = 28;
pub const MGMT_EV_UNCONF_INDEX_ADDED: u32 = 29;
pub const MGMT_EV_UNCONF_INDEX_REMOVED: u32 = 30;
pub const MGMT_EV_NEW_CONFIG_OPTIONS: u32 = 31;
pub const MGMT_EV_EXT_INDEX_ADDED: u32 = 32;
pub const MGMT_EV_EXT_INDEX_REMOVED: u32 = 33;
pub const MGMT_EV_LOCAL_OOB_DATA_UPDATED: u32 = 34;
pub const MGMT_EV_ADVERTISING_ADDED: u32 = 35;
pub const MGMT_EV_ADVERTISING_REMOVED: u32 = 36;
pub const MGMT_EV_EXT_INFO_CHANGED: u32 = 37;
pub const MGMT_EV_PHY_CONFIGURATION_CHANGED: u32 = 38;
pub const MGMT_EV_EXP_FEATURE_CHANGE: u32 = 39;
pub const MGMT_EV_DEVICE_FLAGS_CHANGED: u32 = 42;
pub const MGMT_EV_ADV_MONITOR_ADDED: u32 = 43;
pub const MGMT_EV_ADV_MONITOR_REMOVED: u32 = 44;
pub const MGMT_EV_CONTROLLER_SUSPEND: u32 = 45;
pub const MGMT_EV_CONTROLLER_RESUME: u32 = 46;
pub const MGMT_EV_ADV_MONITOR_DEVICE_FOUND: u32 = 47;
pub const MGMT_EV_ADV_MONITOR_DEVICE_LOST: u32 = 48;
pub const MGMT_EV_MESH_DEVICE_FOUND: u32 = 49;
pub const MGMT_EV_MESH_PACKET_CMPLT: u32 = 50;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct bdaddr_t {
    pub b: [u8; 6usize],
}
#[test]
fn bindgen_test_layout_bdaddr_t() {
    const UNINIT: ::std::mem::MaybeUninit<bdaddr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bdaddr_t>(),
        6usize,
        concat!("Size of: ", stringify!(bdaddr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bdaddr_t>(),
        1usize,
        concat!("Alignment of ", stringify!(bdaddr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bdaddr_t),
            "::",
            stringify!(b)
        )
    );
}
pub const HCI_UP: _bindgen_ty_8 = 0;
pub const HCI_INIT: _bindgen_ty_8 = 1;
pub const HCI_RUNNING: _bindgen_ty_8 = 2;
pub const HCI_PSCAN: _bindgen_ty_8 = 3;
pub const HCI_ISCAN: _bindgen_ty_8 = 4;
pub const HCI_AUTH: _bindgen_ty_8 = 5;
pub const HCI_ENCRYPT: _bindgen_ty_8 = 6;
pub const HCI_INQUIRY: _bindgen_ty_8 = 7;
pub const HCI_RAW: _bindgen_ty_8 = 8;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_hci {
    pub hci_family: sa_family_t,
    pub hci_dev: ::std::os::raw::c_ushort,
    pub hci_channel: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_sockaddr_hci() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_hci> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_hci>(),
        6usize,
        concat!("Size of: ", stringify!(sockaddr_hci))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_hci>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr_hci))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hci_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_hci),
            "::",
            stringify!(hci_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hci_dev) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_hci),
            "::",
            stringify!(hci_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hci_channel) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_hci),
            "::",
            stringify!(hci_channel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_dev_stats {
    pub err_rx: u32,
    pub err_tx: u32,
    pub cmd_tx: u32,
    pub evt_rx: u32,
    pub acl_tx: u32,
    pub acl_rx: u32,
    pub sco_tx: u32,
    pub sco_rx: u32,
    pub byte_rx: u32,
    pub byte_tx: u32,
}
#[test]
fn bindgen_test_layout_hci_dev_stats() {
    const UNINIT: ::std::mem::MaybeUninit<hci_dev_stats> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hci_dev_stats>(),
        40usize,
        concat!("Size of: ", stringify!(hci_dev_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_stats))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_rx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(err_rx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_tx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(err_tx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_tx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(cmd_tx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evt_rx) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(evt_rx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acl_tx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(acl_tx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acl_rx) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(acl_rx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sco_tx) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(sco_tx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sco_rx) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(sco_rx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_rx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(byte_rx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_tx) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(byte_tx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_dev_info {
    pub dev_id: u16,
    pub name: [::std::os::raw::c_char; 8usize],
    pub bdaddr: bdaddr_t,
    pub flags: u32,
    pub type_: u8,
    pub features: [u8; 8usize],
    pub pkt_type: u32,
    pub link_policy: u32,
    pub link_mode: u32,
    pub acl_mtu: u16,
    pub acl_pkts: u16,
    pub sco_mtu: u16,
    pub sco_pkts: u16,
    pub stat: hci_dev_stats,
}
#[test]
fn bindgen_test_layout_hci_dev_info() {
    const UNINIT: ::std::mem::MaybeUninit<hci_dev_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hci_dev_info>(),
        92usize,
        concat!("Size of: ", stringify!(hci_dev_info))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_info>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(dev_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bdaddr) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkt_type) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(pkt_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).link_policy) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(link_policy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).link_mode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(link_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acl_mtu) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(acl_mtu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acl_pkts) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(acl_pkts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sco_mtu) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(sco_mtu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sco_pkts) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(sco_pkts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stat) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(stat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_dev_req {
    pub dev_id: u16,
    pub dev_opt: u32,
}
#[test]
fn bindgen_test_layout_hci_dev_req() {
    const UNINIT: ::std::mem::MaybeUninit<hci_dev_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hci_dev_req>(),
        8usize,
        concat!("Size of: ", stringify!(hci_dev_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_req>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_req),
            "::",
            stringify!(dev_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_opt) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_req),
            "::",
            stringify!(dev_opt)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct hci_dev_list_req {
    pub dev_num: u16,
    pub dev_req: __IncompleteArrayField<hci_dev_req>,
}
#[test]
fn bindgen_test_layout_hci_dev_list_req() {
    const UNINIT: ::std::mem::MaybeUninit<hci_dev_list_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hci_dev_list_req>(),
        4usize,
        concat!("Size of: ", stringify!(hci_dev_list_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_list_req>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_list_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_list_req),
            "::",
            stringify!(dev_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_req) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_list_req),
            "::",
            stringify!(dev_req)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_hdr {
    pub opcode: u16,
    pub index: u16,
    pub len: u16,
}
#[test]
fn bindgen_test_layout_mgmt_hdr() {
    const UNINIT: ::std::mem::MaybeUninit<mgmt_hdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mgmt_hdr>(),
        6usize,
        concat!("Size of: ", stringify!(mgmt_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_hdr>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_hdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_hdr),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_hdr),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_hdr),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_read_version {
    pub version: u8,
    pub revision: u16,
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_version() {
    const UNINIT: ::std::mem::MaybeUninit<mgmt_rp_read_version> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_version>(),
        3usize,
        concat!("Size of: ", stringify!(mgmt_rp_read_version))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_version>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_read_version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_version),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_version),
            "::",
            stringify!(revision)
        )
    );
}
#[repr(C, packed)]
pub struct mgmt_rp_read_commands {
    pub num_commands: u16,
    pub num_events: u16,
    pub opcodes: __IncompleteArrayField<u16>,
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_commands() {
    const UNINIT: ::std::mem::MaybeUninit<mgmt_rp_read_commands> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_commands>(),
        4usize,
        concat!("Size of: ", stringify!(mgmt_rp_read_commands))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_commands>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_read_commands))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_commands) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_commands),
            "::",
            stringify!(num_commands)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_events) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_commands),
            "::",
            stringify!(num_events)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcodes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_commands),
            "::",
            stringify!(opcodes)
        )
    );
}
#[repr(C, packed)]
pub struct mgmt_rp_read_index_list {
    pub num_controllers: u16,
    pub index: __IncompleteArrayField<u16>,
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_index_list() {
    const UNINIT: ::std::mem::MaybeUninit<mgmt_rp_read_index_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_index_list>(),
        2usize,
        concat!("Size of: ", stringify!(mgmt_rp_read_index_list))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_index_list>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_read_index_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_controllers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_index_list),
            "::",
            stringify!(num_controllers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_index_list),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_read_info {
    pub bdaddr: bdaddr_t,
    pub version: u8,
    pub manufacturer: u16,
    pub supported_settings: u32,
    pub current_settings: u32,
    pub dev_class: [u8; 3usize],
    pub name: [u8; 249usize],
    pub short_name: [u8; 11usize],
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_info() {
    const UNINIT: ::std::mem::MaybeUninit<mgmt_rp_read_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_info>(),
        280usize,
        concat!("Size of: ", stringify!(mgmt_rp_read_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_read_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bdaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_info),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_info),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manufacturer) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_info),
            "::",
            stringify!(manufacturer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supported_settings) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_info),
            "::",
            stringify!(supported_settings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_settings) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_info),
            "::",
            stringify!(current_settings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_class) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_info),
            "::",
            stringify!(dev_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).short_name) as usize - ptr as usize },
        269usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_info),
            "::",
            stringify!(short_name)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_read_config_info {
    pub manufacturer: u16,
    pub supported_options: u32,
    pub missing_options: u32,
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_config_info() {
    const UNINIT: ::std::mem::MaybeUninit<mgmt_rp_read_config_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_config_info>(),
        10usize,
        concat!("Size of: ", stringify!(mgmt_rp_read_config_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_config_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_read_config_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manufacturer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_config_info),
            "::",
            stringify!(manufacturer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supported_options) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_config_info),
            "::",
            stringify!(supported_options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).missing_options) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_config_info),
            "::",
            stringify!(missing_options)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_set_external_config {
    pub config: u8,
}
#[test]
fn bindgen_test_layout_mgmt_cp_set_external_config() {
    const UNINIT: ::std::mem::MaybeUninit<mgmt_cp_set_external_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_set_external_config>(),
        1usize,
        concat!("Size of: ", stringify!(mgmt_cp_set_external_config))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_set_external_config>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_set_external_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_external_config),
            "::",
            stringify!(config)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_set_public_address {
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_mgmt_cp_set_public_address() {
    const UNINIT: ::std::mem::MaybeUninit<mgmt_cp_set_public_address> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_set_public_address>(),
        6usize,
        concat!("Size of: ", stringify!(mgmt_cp_set_public_address))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_set_public_address>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_set_public_address))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bdaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_public_address),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
pub struct mgmt_rp_read_ext_index_list {
    pub num_controllers: u16,
    pub entry: __IncompleteArrayField<mgmt_rp_read_ext_index_list__bindgen_ty_1>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_read_ext_index_list__bindgen_ty_1 {
    pub index: u16,
    pub type_: u8,
    pub bus: u8,
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_ext_index_list__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<mgmt_rp_read_ext_index_list__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_ext_index_list__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(mgmt_rp_read_ext_index_list__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_ext_index_list__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(mgmt_rp_read_ext_index_list__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_ext_index_list__bindgen_ty_1),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_ext_index_list__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_ext_index_list__bindgen_ty_1),
            "::",
            stringify!(bus)
        )
    );
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_ext_index_list() {
    const UNINIT: ::std::mem::MaybeUninit<mgmt_rp_read_ext_index_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_ext_index_list>(),
        2usize,
        concat!("Size of: ", stringify!(mgmt_rp_read_ext_index_list))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_ext_index_list>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_read_ext_index_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_controllers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_ext_index_list),
            "::",
            stringify!(num_controllers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_ext_index_list),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C, packed)]
pub struct mgmt_ev_cmd_complete {
    pub opcode: u16,
    pub status: u8,
    pub data: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_mgmt_ev_cmd_complete() {
    const UNINIT: ::std::mem::MaybeUninit<mgmt_ev_cmd_complete> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_cmd_complete>(),
        3usize,
        concat!("Size of: ", stringify!(mgmt_ev_cmd_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_cmd_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_cmd_complete))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_cmd_complete),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_cmd_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_cmd_complete),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_cmd_status {
    pub opcode: u16,
    pub status: u8,
}
#[test]
fn bindgen_test_layout_mgmt_ev_cmd_status() {
    const UNINIT: ::std::mem::MaybeUninit<mgmt_ev_cmd_status> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_cmd_status>(),
        3usize,
        concat!("Size of: ", stringify!(mgmt_ev_cmd_status))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_cmd_status>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_cmd_status))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_cmd_status),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_cmd_status),
            "::",
            stringify!(status)
        )
    );
}
