//! These were the unit tests that needed to be removed as they relied on linux only functionality.

#![cfg(target_os = "linux")]

use std::future::Future;
use std::sync::{Arc,Mutex};
use bo_tie::hci::*;

lazy_static::lazy_static! {

    pub static ref TEST_EXCLUSION: Arc<Mutex<()>> = Arc::new(Mutex::new(()));
}

fn get_adapter() -> super::HostInterface<bo_tie_linux::HCIAdapter> {
    let adapter = bo_tie_linux::HCIAdapter::default();

    bo_tie::hci::HostInterface::from(adapter)
}

/// Wrapper around whatever is the future executor du jour
#[inline]
pub fn block_for_result<T>( future: impl Future <Output=T> ) -> T
{
    futures::executor::block_on(future)
}

#[test]
fn host_interface_default_test() {
    bo_tie::hci::test_util::get_adapter();
}

mod add_device_to_white_list_tests {

    use bo_tie::hci::le::mandatory::add_device_to_white_list::*;
    use std::process::Command;
    use bo_tie::BluetoothDeviceAddress;
    use super::block_for_result;

    #[test]
    fn add_device_to_white_list_test() {
        let _u = bo_tie::hci::test_util::TEST_EXCLUSION.lock().unwrap();

        let test_address_1 = BluetoothDeviceAddress::from([0x11,0x22,0x33,0x44,0x55,0x66]);
        let test_address_2 = BluetoothDeviceAddress::from([0x12,0x34,0x56,0x78,0x9A,0xBC]);

        let test_address_1_str = alloc::format!("{:02X}:{:02X}:{:02X}:{:02X}:{:02X}:{:02X}",
            test_address_1[5],
            test_address_1[4],
            test_address_1[3],
            test_address_1[2],
            test_address_1[1],
            test_address_1[0]
        );

        let test_address_2_str = alloc::format!("{:02X}:{:02X}:{:02X}:{:02X}:{:02X}:{:02X}",
            test_address_2[5],
            test_address_2[4],
            test_address_2[3],
            test_address_2[2],
            test_address_2[1],
            test_address_2[0],
        );

        let adapter = bo_tie::hci::test_util::get_adapter();

        block_for_result( send(&adapter, AddressType::PublicDeviceAddress, test_address_1))
            .unwrap();

        Command::new("hcitool")
            .args(&["lewlrm", &test_address_1_str])
            .output()
            .expect("Failed to execute hcitool command");

        block_for_result(send(&adapter, AddressType::RandomDeviceAddress, test_address_2))
            .unwrap();

        Command::new("hcitool")
            .args(&["lewlrm", &test_address_2_str])
            .output()
            .expect("Failed to execute hcitool command");

        #[cfg(bluetooth_5_0)]
        {
            let result = block_for_result(
                send(&adapter, AddressType::DevicesSendingAnonymousAdvertisements, [0;6])
            ).unwrap();

            assert_eq!(1, result.len() );

        }
    }
}

mod clear_white_list_tests {

    use bo_tie::hci::le::mandatory::clear_white_list::*;
    use super::block_for_result;
    use std::process::Command;

    #[test]
    pub fn clear_white_list_test() {

        let _u = bo_tie::hci::test_util::TEST_EXCLUSION.lock().unwrap();

        let test_address_1 = bo_tie::BluetoothDeviceAddress::from([0x11,0x22,0x33,0x44,0x55,0x66]);
        let test_address_2 = bo_tie::BluetoothDeviceAddress::from([0x12,0x34,0x45,0x56,0x78,0x8A]);

        let test_address_1_str = alloc::format!("{:02X}:{:02X}:{:02X}:{:02X}:{:02X}:{:02X}",
            test_address_1[5],
            test_address_1[4],
            test_address_1[3],
            test_address_1[2],
            test_address_1[1],
            test_address_1[0],
        );
        let test_address_2_str =alloc::format!("{:02X}:{:02X}:{:02X}:{:02X}:{:02X}:{:02X}",
            test_address_2[5],
            test_address_2[4],
            test_address_2[3],
            test_address_2[2],
            test_address_2[1],
            test_address_2[0],
        );

        let host_interface = bo_tie::hci::test_util::get_adapter();

        Command::new("hcitool")
            .args(&["lewladd", &test_address_1_str])
            .output()
            .expect("Failed to execute hcitool command");

        Command::new("hcitool")
            .args(&["lewladd", &test_address_2_str])
            .output()
            .expect("Failed to execute hcitool command");

        block_for_result(send(&host_interface)).unwrap();

        let output_1 = Command::new("hcitool")
            .args(&["lewlrm", &test_address_1_str])
            .output()
            .expect("Failed to execute hcitool command");

        let output_2 = Command::new("hcitool")
            .args(&["lewlrm", &*test_address_2_str])
            .output()
            .expect("Failed to execute hcitool command");

        assert!( !output_1.status.success(), "hcitool should not have succeded");
        assert!( !output_2.status.success(), "hcitool should not have succeded");
    }
}

mod read_buffer_size_test {

    use bo_tie::hci::le::mandatory::read_buffer_size::*;
    use super::block_for_result;

    #[test]
    fn read_buffer_size_test() {

        block_for_result(send(&bo_tie::hci::test_util::get_adapter())).unwrap();

    }
}

mod read_local_supported_features_tests {

    use bo_tie::hci::le::mandatory::read_local_supported_features::*;
    use super::block_for_result;

    #[test]
    fn read_local_supported_features_test() {

        block_for_result(send(&bo_tie::hci::test_util::get_adapter())).unwrap();

    }
}

mod read_supported_states_tests {

    use bo_tie::hci::le::mandatory::read_supported_states::*;
    use super::block_for_result;

    #[test]
    fn read_supported_states_test() {

        block_for_result(send(&bo_tie::hci::test_util::get_adapter())).unwrap();

    }
}

mod read_white_list_size_tests {

    use bo_tie::hci::le::mandatory::read_white_list_size::*;
    use std::process::Command;
    use super::block_for_result;

    #[test]
    fn read_white_list_size_test() {

        let output = Command::new("hcitool")
            .arg("lewlsz")
            .output()
            .expect("failed to execute process");

        let hcitool_cnt = alloc::string::String::from_utf8_lossy(&output.stdout)
                .trim_start_matches("White list size: ")
                .trim_end()
                .parse::<usize>()
                .expect("Couldn't convert string to number");

        let hci_result = block_for_result(send(&bo_tie::hci::test_util::get_adapter())).unwrap();

        assert_eq!(hcitool_cnt, hci_result);
    }
}

mod remove_device_from_white_list_tests {

    use bo_tie::hci::le::mandatory::remove_device_from_white_list::*;
    use super::block_for_result;
    use std::process::Command;

    #[test]
    fn remove_device_from_white_list_test() {

        let _u = bo_tie::hci::test_util::TEST_EXCLUSION.lock().unwrap();

        let test_address_1 = bo_tie::BluetoothDeviceAddress::from([0x11,0x22,0x33,0x44,0x55,0x66]);
        let test_address_2 = bo_tie::BluetoothDeviceAddress::from([0x12,0x34,0x45,0x56,0x78,0x8A]);
        let test_address_3 = bo_tie::BluetoothDeviceAddress::from([0xff,0xee,0xdd,0xcc,0xbb,0xaa]);

        let test_address_1_str = alloc::format!("{:02X}:{:02X}:{:02X}:{:02X}:{:02X}:{:02X}",
            test_address_1[5],
            test_address_1[4],
            test_address_1[3],
            test_address_1[2],
            test_address_1[1],
            test_address_1[0],
        );
        let test_address_2_str = alloc::format!("{:02X}:{:02X}:{:02X}:{:02X}:{:02X}:{:02X}",
            test_address_2[5],
            test_address_2[4],
            test_address_2[3],
            test_address_2[2],
            test_address_2[1],
            test_address_2[0],
        );

        let hi = bo_tie::hci::test_util::get_adapter();

        Command::new("hcitool")
            .args(&["lewladd", &test_address_1_str])
            .output()
            .expect("Failed to execute hcitool command");

        Command::new("hcitool")
            .args(&["lewladd", "--random", &test_address_2_str])
            .output()
            .expect("Failed to execute hcitool command");

        block_for_result(
            send(&hi, AddressType::PublicDeviceAddress, test_address_1)
        )
        .unwrap();

        block_for_result(
            send(&hi, AddressType::RandomDeviceAddress, test_address_2)
        )
        .unwrap();

        block_for_result(
            send(&hi, AddressType::PublicDeviceAddress, test_address_3)
        )
        .unwrap_err();
    }
}

mod set_event_mask_tests {

    use bo_tie::hci::le::mandatory::set_event_mask::*;
    use super::block_for_result;
    use bo_tie::hci::events::LEMeta;

    #[test]
    fn set_event_mask_test() {

        let hi = bo_tie::hci::test_util::get_adapter();

        let enabled_events = alloc::vec! [
            LEMeta::ConnectionComplete,
            LEMeta::AdvertisingReport,
            LEMeta::ConnectionUpdateComplete,
            LEMeta::ReadRemoteFeaturesComplete,
        ];

        block_for_result(send( &hi, enabled_events )).unwrap();
    }
}

mod test_end_tests {

    use bo_tie::hci::le::mandatory::test_end::*;
    use super::block_for_result;

    #[test]
    #[should_panic]
    fn test_end_test() {

        block_for_result(send( &bo_tie::hci::test_util::get_adapter() )).unwrap();

    }
}

mod ip_read_bd_addr_tests {

    use bo_tie::hci::le::mandatory::ip_read_bd_addr::*;
    use std::process::Command;
    use std::iter::Iterator;
    use super::block_for_result;

    trait TryCollect<A> {
        fn try_collect(self) -> Result<A,&'static str>;
    }

    impl<T> TryCollect<[u8;6]> for T where T: Iterator<Item=u8> {

        fn try_collect(self) -> Result<[u8;6],&'static str> {
            let mut arr = [0u8;6];

            let mut index = 0;
            for val in self {
                if index < 6 {
                    arr[index] = val;
                    index += 1
                }
                else {
                    return Err("Device address is too large");
                }
            }

            if index < 6 {
                Err("Device address is too small")
            }
            else {
                Ok(arr)
            }
        }
    }

    #[test]
    fn ip_read_bd_addr_test() {

        let output = Command::new("hcitool")
            .arg("dev")
            .output()
            .expect("failed to execute process");

        let mut hcitool_bdaddr: BluetoothDeviceAddress =
            alloc::string::String::from_utf8_lossy(&output.stdout)
                .trim_start_matches(|c: char| c != '0')
                .trim_start_matches("0")
                .trim()
                .split(":")
                .map(|s| u8::from_str_radix(s,16).unwrap() )
                .try_collect()
                .unwrap();

        hcitool_bdaddr.reverse();

        block_for_result(send(&bo_tie::hci::test_util::get_adapter())).unwrap();

    }
}

mod ip_read_local_supported_features_tests {

    use bo_tie::hci::le::mandatory::ip_read_local_supported_features::*;
    use super::block_for_result;

    #[test]
    fn ip_read_local_supported_features() {

        block_for_result(send(&bo_tie::hci::test_util::get_adapter()))
            .unwrap();

    }
}

mod ip_read_local_version_information_tests {

    use bo_tie::hci::le::mandatory::ip_read_local_version_information::*;
    use super::block_for_result;

    #[test]
    fn ip_read_local_version_information_test() {
        block_for_result( send(&bo_tie::hci::test_util::get_adapter()) ).unwrap();
    }
}

mod reset_tests {

    use bo_tie::hci::le::mandatory::::*;
    use super::block_for_result;

    #[test]
    fn reset_test() {

        block_for_result(send(&bo_tie::hci::test_util::get_adapter())).unwrap();

    }
}

mod ip_read_local_supported_commands_tests {

    use bo_tie::hci::le::mandatory::ip_read_local_supported_commands::*;
    use super::block_for_result;
    use test::Bencher;

    #[test]
    fn ip_read_local_supported_commands_test() {
        block_for_result(send(&bo_tie::hci::test_util::get_adapter())).unwrap();

    }

    #[bench]
    fn ip_read_local_supported_commands_bench( b: &mut Bencher ) {
        let hci = bo_tie::hci::test_util::get_adapter();

        b.iter(|| block_for_result(send(&hci)));
    }

    #[bench]
    /// The hope is that converting the raw bits to a vector of commands is much faster
    /// then the response from the controller (which is what
    /// ip_read_local_supported_features_bench does)
    fn supported_commands_from_raw_bench( b: &mut Bencher) {

        // Should be the worse than the worst case from the hci return for
        // performance reasons.
        b.iter( || { SupportedCommands::try_from(CmdReturn {
            status : 0,
            supported_commands: [0xFFu8;64], // worst case scenerio
        }) } );
    }
}

mod read_advertising_channel_tx_power_tests {

    use bo_tie::hci::le::transmitter::read_advertising_channel_tx_power::*;
    use super::block_for_result;

    #[test]
    fn read_advertising_channel_tx_power_test() {
        block_for_result(send(&bo_tie::hci::test_util::get_adapter())).unwrap();

    }

    #[test]
    fn tx_power_into_watts_test() {
        // just some data from wikipedia's dBm page
        let test_data = [(29i8, 794f32), (24i8,251f32), (-20i8, 10E-6f32)];

        let fudge_factor = 0.5;

        let fudge = | act: f32, exp: f32 | {
            ( exp + fudge_factor > act ) && ( exp - fudge_factor < act )
        };

        let dbg_out = | act, exp | {
            alloc::format!("act: {:?}, exp: {:?}, fudge: {:?}", act, exp, fudge_factor)
        };

        for (dbm, exp_mw) in test_data.iter() {
            let act_mw = TxPower(*dbm).into_milli_watts();

            assert!(fudge(act_mw,*exp_mw), "{}", dbg_out(act_mw,*exp_mw));
        }
    }
}

mod transmitter_test_test {

    use bo_tie::hci::le::transmitter::transmitter_test::*;
    use bo_tie::hci::le::mandatory::test_end;
    use std::{thread, time};
    use super::block_for_result;

    #[test]
    #[ignore]
    fn transmitter_test_test() {
        let hi = bo_tie::hci::test_util::get_adapter();

        let payload = TestPayload::Repeat11110000;
        let frequency = Frequency::new( 2460 ).unwrap();
        let payload_len = 2u8;

        let sleep_duration = time::Duration::new(1,0);

        block_for_result(send(&hi, frequency, payload, payload_len)).unwrap();

        thread::sleep(sleep_duration);

        block_for_result(test_end::send(&bo_tie::hci::test_util::get_adapter()))
            .unwrap();
    }
}

mod set_advertising_data_test {

    use bo_tie::hci::le::transmitter::set_advertising_data::*;
    use super::block_for_result;

    #[test]
    fn set_advertising_data_test() {

        use bo_tie::gap::advertise::{flags,local_name};

        let mut flags = flags::Flags::new();

        flags.get_user(0).enable();
        flags.get_user(20).enable();

        let local_name = local_name::LocalName::new("Test", false);

        let mut ad = AdvertisingData::new();
        ad.try_push(flags).unwrap();
        ad.try_push(local_name).unwrap();

        block_for_result(send(&bo_tie::hci::test_util::get_adapter(), ad)).unwrap();

    }

    #[test]
    fn advertising_data_try_from_test () {

        use bo_tie::gap::advertise::{flags,local_name};

        let mut flags = flags::Flags::new();

        flags.get_user(11).enable();
        flags.get_user(8*3).enable();

        let too_long_name = local_name::LocalName::new("Supercalifragilisticexpialidocious", true);

        AdvertisingData::new()
        .try_push(flags)
        .unwrap();

        AdvertisingData::new()
        .try_push(too_long_name)
        .unwrap_err();
    }

    #[test]
    fn advertising_data_try_push_test () {
        use bo_tie::gap::advertise::local_name::LocalName;
        use std::str::from_utf8;

        let local_name_1 = LocalName::new("abcdefghijklm", true);
        let local_name_2 = LocalName::new("012345678901234", false);
        let local_name_too_long = LocalName::new(from_utf8(&[102u8;31]).unwrap(), false);

        let mut test_ad_1 = AdvertisingData::early_terminate();
        let mut test_ad_2 = AdvertisingData::early_terminate();

        assert!(test_ad_1.try_push( local_name_1 ).is_ok());

        assert!(test_ad_1.try_push( local_name_2 ).is_err());

        assert!(test_ad_2.try_push( local_name_too_long ).is_err());
    }
}

mod set_advertising_enable_tests {

    use bo_tie::hci::le::transmitter::set_advertising_enable::*;
    use super::super::set_advertising_data;
    use super::block_for_result;

    #[test]
    fn set_advertising_enable_test() {
        use bo_tie::gap::advertise::local_name::LocalName;

        let hci = bo_tie::hci::test_util::get_adapter();

        let mut payload = set_advertising_data::AdvertisingData::new();

        payload.try_push(LocalName::new("ENABLE BLE TEST", true)).unwrap();

        block_for_result(set_advertising_data::send(&hci, payload)).unwrap();

        block_for_result(send(&hci, true)).unwrap();

        block_for_result(send(&hci, false)).unwrap();
    }
}

mod set_advertising_parameters_tests {

    use bo_tie::hci::le::transmitter::set_advertising_parameters::*;
    use std::time::Duration;
    use super::block_for_result;

    #[test]
    fn advertising_interval_test() {

        AdvertisingInterval::try_from_raw(0x0020).unwrap();

        AdvertisingInterval::try_from_raw(0x0019).unwrap_err();

        AdvertisingInterval::try_from_raw(0x4000).unwrap();

        AdvertisingInterval::try_from_raw(0x4001).unwrap_err();

        AdvertisingInterval::try_from_duration(Duration::from_millis(20)).unwrap();

        AdvertisingInterval::try_from_duration(Duration::from_nanos(19999999)).unwrap_err();

        AdvertisingInterval::try_from_duration(Duration::new(10, 24000000)).unwrap();

        AdvertisingInterval::try_from_duration(Duration::new(10, 24000001)).unwrap();
    }

    #[test]
    fn set_advertising_parameters_test() {
        let params = AdvertisingParameters::default_with_peer_address(&[0x12;6]);

        block_for_result(send( &bo_tie::hci::test_util::get_adapter(), params)).unwrap();

    }

}

mod set_random_address_tests {

    use bo_tie::hci::le::transmitter::set_random_address::*;
    use super::block_for_result;

    #[test]
    fn set_random_address_test() {

        let static_address_flag = 0b11000000u8;

        let addr = [0x11,0x22,0x33,0x44,0x55, (0x66 | static_address_flag) ];

        block_for_result(send(&bo_tie::hci::test_util::get_adapter(), addr)).unwrap();

    }
}

mod receiver_test_tests {

    use bo_tie::hci::le::receiver::receiver_test::*;
    use super::block_for_result;

    #[test]
    #[ignore]
    fn receiver_test_command_test() {

        let frequency = Frequency::new(2420).unwrap();

        block_for_result(send(&bo_tie::hci::test_util::get_adapter(), frequency)).unwrap();

    }
}

mod set_scan_enable_tests {

    use bo_tie::hci::le::receiver::set_scan_enable::*;
    use super::block_for_result;

    #[test]
    fn set_scan_enable_test() {

        #![allow(unreachable_code)]
        panic!("Test not written correctly");

        let hci = bo_tie::hci::test_util::get_adapter();

        block_for_result(send(&hci, true, true)).unwrap();

        block_for_result(send(&hci, true, true)).unwrap();

        block_for_result(send(&hci, false, true)).unwrap();

        block_for_result(send(&hci, false, false)).unwrap();
    }
}

mod disconnect_tests {

    use bo_tie::hci::le::connection::disconnect::*;
    use super::block_for_result;

    #[test]
    fn disconnect_test() {
        // should be a random, unused handle
        let handle = ConnectionHandle::try_from(0x123).unwrap();

        let reason = DisconnectReason::AuthenticationFailure;

        let parameters = DisconnectParameters {
            connection_handle: handle,
            disconnect_reason: reason,
        };


        block_for_result(send(&bo_tie::hci::test_util::get_adapter(), parameters)).unwrap_err();
    }
}

mod connection_update_tests {

    use bo_tie::hci::le::connection::connection_update::*;
    use bo_tie::hci::common;
    use super::super::ConnectionInterval;
    use super::block_for_result;

    /// This will likely fail with a timeout due to there being no connection to
    /// a device.
    #[test]
    #[ignore]
    fn connection_update_test() {

        let timeout = Duration::from_secs(1);

        let parameter = ConnectionUpdate {
            handle: ConnectionHandle::try_from(0x0033).unwrap(),
            interval: ConnectionIntervalBounds::try_from(
                ConnectionInterval::try_from_raw(0x100).unwrap(),
                ConnectionInterval::try_from_raw(0x100).unwrap()
            ).unwrap(),
            latency: 0x1000,
            supervision_timeout: common::SupervisionTimeout::try_from_raw(0x234).unwrap(),
            connection_event_len: ConnectionEventLength::new(0, 0xFFFF)
        };

        let result = block_for_result(send(&bo_tie::hci::test_util::get_adapter(), parameter, timeout))
            .unwrap();

        if let error::Error::NoError = error::Error::from(result.status) {
            panic!("Expected Error because no connection is made");
        }
    }
}

mod create_connection_cancel_tests {

    use bo_tie::hci::le::connection::create_connection_cancel::*;
    use super::block_for_result;

    #[test]
    fn create_connection_cancel_test() {

        //block_for_result(send(&bo_tie::hci::test_util::get_adapter())).unwrap();
        unimplemented!()
    }
}

mod create_connection_tests {
    #[test]
    fn create_connection_test() {
        unimplemented!()
    }
}

mod read_channel_map_tests {

    #[test]
    fn read_channel_map_test() {
        unimplemented!()
    }
}

mod read_remote_features_tests {
    #[test]
    fn read_remote_features_test() {
        unimplemented!()
    }
}

mod set_host_channel_classification_tests {

    use bo_tie::hci::le::connection::set_host_channel_classification::*;

    #[test]
    fn set_host_channel_classification_test() {
        unimplemented!()
    }

    #[test]
    fn channel_map_test() {
        unimplemented!();
        let _expected_raw_map = [
            (1 << 3) | (1 << 7),
            (1 << (9 - 8)) | (1 << (11 - 8)) | (1 << (13 - 8)),
            0,
            0,
            0,
        ];

        let _map = ChannelMap::try_from(&[11,11,3,9,13,7]).unwrap();
    }
}

mod read_transmit_power_level_tests {
    use bo_tie::hci::le::connection::read_transmit_power_level::*;
    use super::block_for_result;

    #[test]
    #[ignore]
    fn read_transmit_power_level_test() {
        let parameter = Parameter {
            connection_handle: ConnectionHandle::try_from(0x00FF).unwrap(),
            level_type: TransmitPowerLevelType::CurrentPowerLevel,
        };

        block_for_result(send(&bo_tie::hci::test_util::get_adapter(), parameter)).unwrap();

    }
}

mod read_remote_version_information_tests {

    #[test]
    fn read_remote_version_information_test() {
        unimplemented!()
    }
}
