/* automatically generated by rust-bindgen 0.63.0 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const BTPROTO_HCI: u32 = 1;
pub const HCI_DEV_NONE: u32 = 65535;
pub const HCI_CHANNEL_RAW: u32 = 0;
pub const HCI_CHANNEL_USER: u32 = 1;
pub type sa_family_t = ::std::os::raw::c_ushort;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __u32 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct bdaddr_t {
    pub b: [__u8; 6usize],
}
#[test]
fn bindgen_test_layout_bdaddr_t() {
    const UNINIT: ::std::mem::MaybeUninit<bdaddr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bdaddr_t>(),
        6usize,
        concat!("Size of: ", stringify!(bdaddr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bdaddr_t>(),
        1usize,
        concat!("Alignment of ", stringify!(bdaddr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(bdaddr_t), "::", stringify!(b))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_hci {
    pub hci_family: sa_family_t,
    pub hci_dev: ::std::os::raw::c_ushort,
    pub hci_channel: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_sockaddr_hci() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_hci> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_hci>(),
        6usize,
        concat!("Size of: ", stringify!(sockaddr_hci))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_hci>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr_hci))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hci_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_hci),
            "::",
            stringify!(hci_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hci_dev) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(sockaddr_hci), "::", stringify!(hci_dev))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hci_channel) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_hci),
            "::",
            stringify!(hci_channel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_dev_stats {
    pub err_rx: __u32,
    pub err_tx: __u32,
    pub cmd_tx: __u32,
    pub evt_rx: __u32,
    pub acl_tx: __u32,
    pub acl_rx: __u32,
    pub sco_tx: __u32,
    pub sco_rx: __u32,
    pub byte_rx: __u32,
    pub byte_tx: __u32,
}
#[test]
fn bindgen_test_layout_hci_dev_stats() {
    const UNINIT: ::std::mem::MaybeUninit<hci_dev_stats> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hci_dev_stats>(),
        40usize,
        concat!("Size of: ", stringify!(hci_dev_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_stats))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_rx) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(hci_dev_stats), "::", stringify!(err_rx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_tx) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(hci_dev_stats), "::", stringify!(err_tx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_tx) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(hci_dev_stats), "::", stringify!(cmd_tx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evt_rx) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(hci_dev_stats), "::", stringify!(evt_rx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acl_tx) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(hci_dev_stats), "::", stringify!(acl_tx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acl_rx) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(hci_dev_stats), "::", stringify!(acl_rx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sco_tx) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(hci_dev_stats), "::", stringify!(sco_tx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sco_rx) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(hci_dev_stats), "::", stringify!(sco_rx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_rx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(byte_rx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_tx) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(byte_tx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_dev_info {
    pub dev_id: __u16,
    pub name: [::std::os::raw::c_char; 8usize],
    pub bdaddr: bdaddr_t,
    pub flags: __u32,
    pub type_: __u8,
    pub features: [__u8; 8usize],
    pub pkt_type: __u32,
    pub link_policy: __u32,
    pub link_mode: __u32,
    pub acl_mtu: __u16,
    pub acl_pkts: __u16,
    pub sco_mtu: __u16,
    pub sco_pkts: __u16,
    pub stat: hci_dev_stats,
}
#[test]
fn bindgen_test_layout_hci_dev_info() {
    const UNINIT: ::std::mem::MaybeUninit<hci_dev_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hci_dev_info>(),
        92usize,
        concat!("Size of: ", stringify!(hci_dev_info))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_info>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_id) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(hci_dev_info), "::", stringify!(dev_id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(hci_dev_info), "::", stringify!(name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bdaddr) as usize - ptr as usize },
        10usize,
        concat!("Offset of field: ", stringify!(hci_dev_info), "::", stringify!(bdaddr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(hci_dev_info), "::", stringify!(flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(hci_dev_info), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkt_type) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(pkt_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).link_policy) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(link_policy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).link_mode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(link_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acl_mtu) as usize - ptr as usize },
        44usize,
        concat!("Offset of field: ", stringify!(hci_dev_info), "::", stringify!(acl_mtu))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acl_pkts) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(acl_pkts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sco_mtu) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(hci_dev_info), "::", stringify!(sco_mtu))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sco_pkts) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(sco_pkts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stat) as usize - ptr as usize },
        52usize,
        concat!("Offset of field: ", stringify!(hci_dev_info), "::", stringify!(stat))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_dev_req {
    pub dev_id: __u16,
    pub dev_opt: __u32,
}
#[test]
fn bindgen_test_layout_hci_dev_req() {
    const UNINIT: ::std::mem::MaybeUninit<hci_dev_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hci_dev_req>(),
        8usize,
        concat!("Size of: ", stringify!(hci_dev_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_req>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_id) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(hci_dev_req), "::", stringify!(dev_id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_opt) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(hci_dev_req), "::", stringify!(dev_opt))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct hci_dev_list_req {
    pub dev_num: __u16,
    pub dev_req: __IncompleteArrayField<hci_dev_req>,
}
#[test]
fn bindgen_test_layout_hci_dev_list_req() {
    const UNINIT: ::std::mem::MaybeUninit<hci_dev_list_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hci_dev_list_req>(),
        4usize,
        concat!("Size of: ", stringify!(hci_dev_list_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_list_req>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_list_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_list_req),
            "::",
            stringify!(dev_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_req) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_list_req),
            "::",
            stringify!(dev_req)
        )
    );
}
